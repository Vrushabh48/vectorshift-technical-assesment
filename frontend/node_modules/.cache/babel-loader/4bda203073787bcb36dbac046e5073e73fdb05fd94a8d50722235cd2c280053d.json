{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useStore } from './store';\nimport { shallow } from 'zustand/shallow';\nexport const useNodeEdgeCounts = () => {\n  _s();\n  const {\n    nodes,\n    edges\n  } = useStore(state => ({\n    nodes: state.nodes,\n    edges: state.edges\n  }), shallow);\n  const nodeCount = nodes.length;\n  const edgeCount = edges.length;\n  const isDAG = () => {\n    const adjacencyList = new Map();\n\n    // Initialize adjacency list\n    nodes.forEach(node => adjacencyList.set(node.id, []));\n    edges.forEach(edge => adjacencyList.get(edge.source).push(edge.target));\n    const visited = new Set();\n    const recStack = new Set();\n    const dfs = node => {\n      if (!visited.has(node)) {\n        visited.add(node);\n        recStack.add(node);\n        const neighbors = adjacencyList.get(node);\n        for (let neighbor of neighbors) {\n          if (!visited.has(neighbor) && dfs(neighbor)) {\n            return true;\n          } else if (recStack.has(neighbor)) {\n            return true;\n          }\n        }\n      }\n      recStack.delete(node);\n      return false;\n    };\n    for (let node of nodes) {\n      if (dfs(node.id)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return {\n    nodeCount,\n    edgeCount,\n    isDAG: isDAG()\n  };\n};\n_s(useNodeEdgeCounts, \"jhO/6NzdkdwyKxfTPfR/ATfN7AQ=\", false, function () {\n  return [useStore];\n});","map":{"version":3,"names":["useStore","shallow","useNodeEdgeCounts","_s","nodes","edges","state","nodeCount","length","edgeCount","isDAG","adjacencyList","Map","forEach","node","set","id","edge","get","source","push","target","visited","Set","recStack","dfs","has","add","neighbors","neighbor","delete"],"sources":["C:/Users/Vrushabh/OneDrive/Documents/GitHub/vectorshift-technical-assesment/frontend/src/nodeEdgeCounts.js"],"sourcesContent":["import { useStore } from './store';\r\nimport { shallow } from 'zustand/shallow';\r\n\r\nexport const useNodeEdgeCounts = () => {\r\n  const { nodes, edges } = useStore((state) => ({\r\n    nodes: state.nodes,\r\n    edges: state.edges,\r\n  }), shallow);\r\n\r\n  const nodeCount = nodes.length;\r\n  const edgeCount = edges.length;\r\n\r\n  const isDAG = () => {\r\n    const adjacencyList = new Map();\r\n\r\n    // Initialize adjacency list\r\n    nodes.forEach((node) => adjacencyList.set(node.id, []));\r\n    edges.forEach((edge) => adjacencyList.get(edge.source).push(edge.target));\r\n\r\n    const visited = new Set();\r\n    const recStack = new Set();\r\n\r\n    const dfs = (node) => {\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        recStack.add(node);\r\n\r\n        const neighbors = adjacencyList.get(node);\r\n        for (let neighbor of neighbors) {\r\n          if (!visited.has(neighbor) && dfs(neighbor)) {\r\n            return true;\r\n          } else if (recStack.has(neighbor)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      recStack.delete(node);\r\n      return false;\r\n    };\r\n\r\n    for (let node of nodes) {\r\n      if (dfs(node.id)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return { nodeCount, edgeCount, isDAG: isDAG() };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,SAAS;AAClC,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGL,QAAQ,CAAEM,KAAK,KAAM;IAC5CF,KAAK,EAAEE,KAAK,CAACF,KAAK;IAClBC,KAAK,EAAEC,KAAK,CAACD;EACf,CAAC,CAAC,EAAEJ,OAAO,CAAC;EAEZ,MAAMM,SAAS,GAAGH,KAAK,CAACI,MAAM;EAC9B,MAAMC,SAAS,GAAGJ,KAAK,CAACG,MAAM;EAE9B,MAAME,KAAK,GAAGA,CAAA,KAAM;IAClB,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;;IAE/B;IACAR,KAAK,CAACS,OAAO,CAAEC,IAAI,IAAKH,aAAa,CAACI,GAAG,CAACD,IAAI,CAACE,EAAE,EAAE,EAAE,CAAC,CAAC;IACvDX,KAAK,CAACQ,OAAO,CAAEI,IAAI,IAAKN,aAAa,CAACO,GAAG,CAACD,IAAI,CAACE,MAAM,CAAC,CAACC,IAAI,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC;IAEzE,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACzB,MAAMC,QAAQ,GAAG,IAAID,GAAG,CAAC,CAAC;IAE1B,MAAME,GAAG,GAAIX,IAAI,IAAK;MACpB,IAAI,CAACQ,OAAO,CAACI,GAAG,CAACZ,IAAI,CAAC,EAAE;QACtBQ,OAAO,CAACK,GAAG,CAACb,IAAI,CAAC;QACjBU,QAAQ,CAACG,GAAG,CAACb,IAAI,CAAC;QAElB,MAAMc,SAAS,GAAGjB,aAAa,CAACO,GAAG,CAACJ,IAAI,CAAC;QACzC,KAAK,IAAIe,QAAQ,IAAID,SAAS,EAAE;UAC9B,IAAI,CAACN,OAAO,CAACI,GAAG,CAACG,QAAQ,CAAC,IAAIJ,GAAG,CAACI,QAAQ,CAAC,EAAE;YAC3C,OAAO,IAAI;UACb,CAAC,MAAM,IAAIL,QAAQ,CAACE,GAAG,CAACG,QAAQ,CAAC,EAAE;YACjC,OAAO,IAAI;UACb;QACF;MACF;MACAL,QAAQ,CAACM,MAAM,CAAChB,IAAI,CAAC;MACrB,OAAO,KAAK;IACd,CAAC;IAED,KAAK,IAAIA,IAAI,IAAIV,KAAK,EAAE;MACtB,IAAIqB,GAAG,CAACX,IAAI,CAACE,EAAE,CAAC,EAAE;QAChB,OAAO,KAAK;MACd;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAED,OAAO;IAAET,SAAS;IAAEE,SAAS;IAAEC,KAAK,EAAEA,KAAK,CAAC;EAAE,CAAC;AACjD,CAAC;AAACP,EAAA,CA9CWD,iBAAiB;EAAA,QACHF,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}