{"ast":null,"code":"// dataUtils.js\n\n// Example data (in practice, you might fetch or compute this dynamically)\nconst nodes = [{\n  id: 'node1',\n  type: 'input',\n  position: {\n    x: 100,\n    y: 100\n  }\n}, {\n  id: 'node2',\n  type: 'output',\n  position: {\n    x: 200,\n    y: 200\n  }\n}];\nconst edges = [{\n  id: 'edge1',\n  source: 'node1',\n  target: 'node2'\n}];\n\n// Function to get the number of nodes and edges\nexport const getNodeCount = () => nodes.length;\nexport const getEdgeCount = () => edges.length;","map":{"version":3,"names":["nodes","id","type","position","x","y","edges","source","target","getNodeCount","length","getEdgeCount"],"sources":["C:/Users/Vrushabh/OneDrive/Documents/GitHub/vectorshift-technical-assesment/frontend/src/dataUtils.js"],"sourcesContent":["// dataUtils.js\r\n\r\n// Example data (in practice, you might fetch or compute this dynamically)\r\nconst nodes = [\r\n    { id: 'node1', type: 'input', position: { x: 100, y: 100 } },\r\n    { id: 'node2', type: 'output', position: { x: 200, y: 200 } },\r\n  ];\r\n  \r\n  const edges = [\r\n    { id: 'edge1', source: 'node1', target: 'node2' },\r\n  ];\r\n  \r\n  // Function to get the number of nodes and edges\r\n  export const getNodeCount = () => nodes.length;\r\n  export const getEdgeCount = () => edges.length;\r\n  "],"mappings":"AAAA;;AAEA;AACA,MAAMA,KAAK,GAAG,CACV;EAAEC,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE,OAAO;EAAEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI;AAAE,CAAC,EAC5D;EAAEJ,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE,QAAQ;EAAEC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI;AAAE,CAAC,CAC9D;AAED,MAAMC,KAAK,GAAG,CACZ;EAAEL,EAAE,EAAE,OAAO;EAAEM,MAAM,EAAE,OAAO;EAAEC,MAAM,EAAE;AAAQ,CAAC,CAClD;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAMT,KAAK,CAACU,MAAM;AAC9C,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAML,KAAK,CAACI,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}