{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vrushabh\\\\OneDrive\\\\Documents\\\\GitHub\\\\vectorshift-technical-assesment\\\\frontend\\\\src\\\\nodes\\\\textNode.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport BaseNode from './BaseNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  var _textareaRef$current;\n  const [currText, setCurrText] = useState((data === null || data === void 0 ? void 0 : data.text) || '{{input}}');\n  const [dimensions, setDimensions] = useState({\n    width: 200,\n    height: 80\n  });\n  const [handles, setHandles] = useState([]);\n  const textareaRef = useRef(null);\n  const calculateDimensions = text => {\n    if (!textareaRef.current) return {\n      width: 200,\n      height: 80\n    };\n    const charWidth = getCharWidth();\n    const maxLineLength = Math.max(...text.split('\\n').map(line => line.length));\n    return {\n      width: Math.max(200, maxLineLength * charWidth + 20),\n      height: 'auto'\n    };\n  };\n  const getCharWidth = () => {\n    const tempSpan = document.createElement('span');\n    tempSpan.style.visibility = 'hidden';\n    tempSpan.style.whiteSpace = 'pre';\n    tempSpan.textContent = 'M';\n    document.body.appendChild(tempSpan);\n    const charWidth = tempSpan.offsetWidth;\n    document.body.removeChild(tempSpan);\n    return charWidth;\n  };\n  const extractVariables = text => {\n    const regex = /\\{\\{\\s*([a-zA-Z_$][a-zA-Z_$0-9])\\s\\}\\}/g;\n    const variables = [];\n    let match;\n    while ((match = regex.exec(text)) !== null) {\n      variables.push(match[1]);\n    }\n    return variables;\n  };\n  const handleTextChange = e => {\n    const newText = e.target.value;\n    setCurrText(newText);\n    setDimensions(calculateDimensions(newText));\n    setHandles(createHandlesForVariables(newText));\n  };\n  const createHandlesForVariables = text => {\n    const variables = extractVariables(text);\n    return variables.map(variable => ({\n      type: 'target',\n      position: 'Left',\n      id: variable\n    }));\n  };\n  useEffect(() => {\n    if (textareaRef.current) {\n      // Reset the height to 'auto' to calculate the new scroll height\n      textareaRef.current.style.height = 'auto';\n      // Set the height based on the scrollHeight\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n    // Assuming createHandlesForVariables is a function to create handles based on currText\n    setHandles(createHandlesForVariables(currText));\n  }, [currText]);\n  useEffect(() => {\n    setDimensions(calculateDimensions(currText));\n  }, [dimensions.width]);\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    handles: [...handles, {\n      type: 'source',\n      position: 'Right',\n      id: 'output'\n    }],\n    label: \"Text Node\",\n    content: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textareaRef,\n      value: currText,\n      onChange: handleTextChange,\n      style: {\n        width: dimensions.width - 20,\n        height: ((_textareaRef$current = textareaRef.current) === null || _textareaRef$current === void 0 ? void 0 : _textareaRef$current.scrollHeight) || 80\n        //\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this),\n    style: {\n      width: dimensions.width,\n      height: dimensions.height,\n      border: '1px solid black'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"+7hPfjSi1lVvSsjZWX3WJdVncXI=\");\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BaseNode","jsxDEV","_jsxDEV","TextNode","id","data","_s","_textareaRef$current","currText","setCurrText","text","dimensions","setDimensions","width","height","handles","setHandles","textareaRef","calculateDimensions","current","charWidth","getCharWidth","maxLineLength","Math","max","split","map","line","length","tempSpan","document","createElement","style","visibility","whiteSpace","textContent","body","appendChild","offsetWidth","removeChild","extractVariables","regex","variables","match","exec","push","handleTextChange","e","newText","target","value","createHandlesForVariables","variable","type","position","scrollHeight","label","content","ref","onChange","fileName","_jsxFileName","lineNumber","columnNumber","border","_c","$RefreshReg$"],"sources":["C:/Users/Vrushabh/OneDrive/Documents/GitHub/vectorshift-technical-assesment/frontend/src/nodes/textNode.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport BaseNode from './BaseNode';\r\n\r\nexport const TextNode = ({ id, data }) => {\r\n  const [currText, setCurrText] = useState(data?.text || '{{input}}');\r\n  const [dimensions, setDimensions] = useState({ width: 200, height: 80 });\r\n  const [handles, setHandles] = useState([]);\r\n  const textareaRef = useRef(null);\r\n\r\n  const calculateDimensions = (text) => {\r\n    if (!textareaRef.current) return { width: 200, height: 80 };\r\n    const charWidth = getCharWidth();\r\n    const maxLineLength = Math.max(...text.split('\\n').map(line => line.length));\r\n    return { width: Math.max(200, maxLineLength * charWidth + 20), height: 'auto' };\r\n  };\r\n\r\n  const getCharWidth = () => {\r\n    const tempSpan = document.createElement('span');\r\n    tempSpan.style.visibility = 'hidden';\r\n    tempSpan.style.whiteSpace = 'pre';\r\n    tempSpan.textContent = 'M';\r\n    document.body.appendChild(tempSpan);\r\n    const charWidth = tempSpan.offsetWidth;\r\n    document.body.removeChild(tempSpan);\r\n    return charWidth;\r\n  };\r\n\r\n  const extractVariables = (text) => {\r\n    const regex = /\\{\\{\\s*([a-zA-Z_$][a-zA-Z_$0-9])\\s\\}\\}/g;\r\n    const variables = [];\r\n    let match;\r\n    while ((match = regex.exec(text)) !== null) {\r\n      variables.push(match[1]);\r\n    }\r\n    return variables;\r\n  };\r\n\r\n  const handleTextChange = (e) => {\r\n    const newText = e.target.value;\r\n    setCurrText(newText);\r\n    setDimensions(calculateDimensions(newText));\r\n    setHandles(createHandlesForVariables(newText));\r\n  };\r\n\r\n  const createHandlesForVariables = (text) => {\r\n    const variables = extractVariables(text);\r\n    return variables.map(variable => ({\r\n      type: 'target',\r\n      position: 'Left',\r\n      id: variable,\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      // Reset the height to 'auto' to calculate the new scroll height\r\n      textareaRef.current.style.height = 'auto';\r\n      // Set the height based on the scrollHeight\r\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\r\n    }\r\n    // Assuming createHandlesForVariables is a function to create handles based on currText\r\n    setHandles(createHandlesForVariables(currText));\r\n  }, [currText]);\r\n\r\n\r\n  useEffect(() => {\r\n    setDimensions(calculateDimensions(currText));\r\n  }, [dimensions.width]);\r\n\r\n  return (\r\n    <BaseNode\r\n      id={id}\r\n      handles={[\r\n        ...handles,\r\n        { type: 'source', position: 'Right', id: 'output' },\r\n      ]}\r\n      label=\"Text Node\"\r\n      content={\r\n        <textarea \r\n          ref={textareaRef}\r\n          value={currText} \r\n          onChange={handleTextChange} \r\n          style={{ \r\n            width: dimensions.width - 20, \r\n            height: textareaRef.current?.scrollHeight || 80, \r\n            //\r\n          }}\r\n        />\r\n      }\r\n      style={{ width: dimensions.width, height: dimensions.height, border: '1px solid black' }}\r\n    />\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}