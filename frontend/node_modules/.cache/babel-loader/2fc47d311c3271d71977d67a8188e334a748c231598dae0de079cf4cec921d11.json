{"ast":null,"code":"import { create } from \"zustand\";\nimport { addEdge, applyNodeChanges, applyEdgeChanges, MarkerType } from 'reactflow';\nexport const useStore = create((set, get) => ({\n  nodes: [],\n  edges: [],\n  nodeIDs: {},\n  // Initialize nodeIDs if it's not already in the state\n\n  getNodeID: type => {\n    const newIDs = {\n      ...get().nodeIDs\n    };\n    if (newIDs[type] === undefined) {\n      newIDs[type] = 0;\n    }\n    newIDs[type] += 1;\n    set({\n      nodeIDs: newIDs\n    });\n    return `${type}-${newIDs[type]}`;\n  },\n  addNode: node => {\n    set({\n      nodes: [...get().nodes, node]\n    });\n  },\n  onNodesChange: changes => {\n    set({\n      nodes: applyNodeChanges(changes, get().nodes)\n    });\n  },\n  onEdgesChange: changes => {\n    set({\n      edges: applyEdgeChanges(changes, get().edges)\n    });\n  },\n  onConnect: connection => {\n    set({\n      edges: addEdge({\n        ...connection,\n        type: 'smoothstep',\n        animated: true,\n        markerEnd: {\n          type: MarkerType.Arrow,\n          height: '20px',\n          width: '20px'\n        }\n      }, get().edges)\n    });\n  },\n  updateNodeField: (nodeId, fieldName, fieldValue) => {\n    set({\n      nodes: get().nodes.map(node => {\n        if (node.id === nodeId) {\n          node.data = {\n            ...node.data,\n            [fieldName]: fieldValue\n          };\n        }\n        return node;\n      })\n    });\n  },\n  // New: Selector functions to get the number of nodes and edges\n  getNodeCount: () => get().nodes.length,\n  getEdgeCount: () => get().edges.length\n}));","map":{"version":3,"names":["create","addEdge","applyNodeChanges","applyEdgeChanges","MarkerType","useStore","set","get","nodes","edges","nodeIDs","getNodeID","type","newIDs","undefined","addNode","node","onNodesChange","changes","onEdgesChange","onConnect","connection","animated","markerEnd","Arrow","height","width","updateNodeField","nodeId","fieldName","fieldValue","map","id","data","getNodeCount","length","getEdgeCount"],"sources":["C:/Users/Vrushabh/OneDrive/Documents/GitHub/vectorshift-technical-assesment/frontend/src/store.js"],"sourcesContent":["import { create } from \"zustand\";\r\nimport {\r\n    addEdge,\r\n    applyNodeChanges,\r\n    applyEdgeChanges,\r\n    MarkerType,\r\n} from 'reactflow';\r\n\r\nexport const useStore = create((set, get) => ({\r\n    nodes: [],\r\n    edges: [],\r\n    nodeIDs: {},  // Initialize nodeIDs if it's not already in the state\r\n\r\n    getNodeID: (type) => {\r\n        const newIDs = { ...get().nodeIDs };\r\n        if (newIDs[type] === undefined) {\r\n            newIDs[type] = 0;\r\n        }\r\n        newIDs[type] += 1;\r\n        set({ nodeIDs: newIDs });\r\n        return `${type}-${newIDs[type]}`;\r\n    },\r\n    \r\n    addNode: (node) => {\r\n        set({\r\n            nodes: [...get().nodes, node],\r\n        });\r\n    },\r\n\r\n    onNodesChange: (changes) => {\r\n        set({\r\n            nodes: applyNodeChanges(changes, get().nodes),\r\n        });\r\n    },\r\n\r\n    onEdgesChange: (changes) => {\r\n        set({\r\n            edges: applyEdgeChanges(changes, get().edges),\r\n        });\r\n    },\r\n\r\n    onConnect: (connection) => {\r\n        set({\r\n            edges: addEdge({\r\n                ...connection,\r\n                type: 'smoothstep',\r\n                animated: true,\r\n                markerEnd: { type: MarkerType.Arrow, height: '20px', width: '20px' }\r\n            }, get().edges),\r\n        });\r\n    },\r\n\r\n    updateNodeField: (nodeId, fieldName, fieldValue) => {\r\n        set({\r\n            nodes: get().nodes.map((node) => {\r\n                if (node.id === nodeId) {\r\n                    node.data = { ...node.data, [fieldName]: fieldValue };\r\n                }\r\n                return node;\r\n            }),\r\n        });\r\n    },\r\n\r\n    // New: Selector functions to get the number of nodes and edges\r\n    getNodeCount: () => get().nodes.length,\r\n    getEdgeCount: () => get().edges.length,\r\n}));\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SACIC,OAAO,EACPC,gBAAgB,EAChBC,gBAAgB,EAChBC,UAAU,QACP,WAAW;AAElB,OAAO,MAAMC,QAAQ,GAAGL,MAAM,CAAC,CAACM,GAAG,EAAEC,GAAG,MAAM;EAC1CC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,CAAC,CAAC;EAAG;;EAEdC,SAAS,EAAGC,IAAI,IAAK;IACjB,MAAMC,MAAM,GAAG;MAAE,GAAGN,GAAG,CAAC,CAAC,CAACG;IAAQ,CAAC;IACnC,IAAIG,MAAM,CAACD,IAAI,CAAC,KAAKE,SAAS,EAAE;MAC5BD,MAAM,CAACD,IAAI,CAAC,GAAG,CAAC;IACpB;IACAC,MAAM,CAACD,IAAI,CAAC,IAAI,CAAC;IACjBN,GAAG,CAAC;MAAEI,OAAO,EAAEG;IAAO,CAAC,CAAC;IACxB,OAAQ,GAAED,IAAK,IAAGC,MAAM,CAACD,IAAI,CAAE,EAAC;EACpC,CAAC;EAEDG,OAAO,EAAGC,IAAI,IAAK;IACfV,GAAG,CAAC;MACAE,KAAK,EAAE,CAAC,GAAGD,GAAG,CAAC,CAAC,CAACC,KAAK,EAAEQ,IAAI;IAChC,CAAC,CAAC;EACN,CAAC;EAEDC,aAAa,EAAGC,OAAO,IAAK;IACxBZ,GAAG,CAAC;MACAE,KAAK,EAAEN,gBAAgB,CAACgB,OAAO,EAAEX,GAAG,CAAC,CAAC,CAACC,KAAK;IAChD,CAAC,CAAC;EACN,CAAC;EAEDW,aAAa,EAAGD,OAAO,IAAK;IACxBZ,GAAG,CAAC;MACAG,KAAK,EAAEN,gBAAgB,CAACe,OAAO,EAAEX,GAAG,CAAC,CAAC,CAACE,KAAK;IAChD,CAAC,CAAC;EACN,CAAC;EAEDW,SAAS,EAAGC,UAAU,IAAK;IACvBf,GAAG,CAAC;MACAG,KAAK,EAAER,OAAO,CAAC;QACX,GAAGoB,UAAU;QACbT,IAAI,EAAE,YAAY;QAClBU,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE;UAAEX,IAAI,EAAER,UAAU,CAACoB,KAAK;UAAEC,MAAM,EAAE,MAAM;UAAEC,KAAK,EAAE;QAAO;MACvE,CAAC,EAAEnB,GAAG,CAAC,CAAC,CAACE,KAAK;IAClB,CAAC,CAAC;EACN,CAAC;EAEDkB,eAAe,EAAEA,CAACC,MAAM,EAAEC,SAAS,EAAEC,UAAU,KAAK;IAChDxB,GAAG,CAAC;MACAE,KAAK,EAAED,GAAG,CAAC,CAAC,CAACC,KAAK,CAACuB,GAAG,CAAEf,IAAI,IAAK;QAC7B,IAAIA,IAAI,CAACgB,EAAE,KAAKJ,MAAM,EAAE;UACpBZ,IAAI,CAACiB,IAAI,GAAG;YAAE,GAAGjB,IAAI,CAACiB,IAAI;YAAE,CAACJ,SAAS,GAAGC;UAAW,CAAC;QACzD;QACA,OAAOd,IAAI;MACf,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EAED;EACAkB,YAAY,EAAEA,CAAA,KAAM3B,GAAG,CAAC,CAAC,CAACC,KAAK,CAAC2B,MAAM;EACtCC,YAAY,EAAEA,CAAA,KAAM7B,GAAG,CAAC,CAAC,CAACE,KAAK,CAAC0B;AACpC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}